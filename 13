    a. Write an OpenMP program to find prime numbers (split) 

#include <stdio.h>
#include <omp.h>
#include <malloc.h>
#include <stdlib.h>
#define N 100000000
#define TRUE 1
#define FALSE 0

int main(int argc, char **argv )
{
char host[80];
int *a;
int i, k, threads, pcount;
double t1, t2;
int found;

/* Set number of threads equal to argv[1] if present */
if (argc > 1)
{
threads = atoi(argv[1]);
if (omp_get_dynamic())
{
omp_set_dynamic(0);
printf("called omp_set_dynamic(0)\n");
}
omp_set_num_threads(threads);
}

printf("%d threads max\n",omp_get_max_threads());

a = (int *) malloc((N+1) * sizeof(int));
// 1. create a list of natural numbers 2, 3, 4, ... none of which is marked.
for (i=2;i<=N;i++) a[i] = 1;
// 2. Set k = 2, the first unmarked number on the list.

k = 2;

t1 = omp_get_wtime();
// 3. Repeat
#pragma omp parallel firstprivate(k) private(i,found)
while (k*k <= N)
{
// a. Mark all multiples of k between k^2 and N - remove even numbers

#pragma omp for
for (i=k*k; i<=N; i+=k)
a[i] = 0;

// b. Find the smallest number greater than k that is unmarked and set k to this new value until k^2 > N

found = FALSE;
for (i=k+1;!found;i++)
{
if (a[i])
{
k = i; 
found = TRUE; 
}
}

}
t2 = omp_get_wtime();
printf("%.2f seconds\n",t2-t1);

// 4. The unmarked numbers are primes
pcount = 0;
for (i=2;i<=N;i++)
{
if( a[i] )
{
pcount++;
//printf("%d\n",i);
}
}
printf("%d primes between 0 and %d\n",pcount,N);
}

Output:
4 threads max
2.94 seconds
5761455 primes between 0 and 100000000
    b.  Write a CUDA program for adding two vectors.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
 
__global__ void vecAdd(double *a, double *b, double *c, int n)
{
     int id = blockIdx.x*blockDim.x+threadIdx.x;
 
    if (id < n)
        c[id] = a[id] + b[id];
}
 
int main( int argc, char* argv[] )
{
        int n = 100;
 
    double *h_a;
    double *h_b;
    double *h_c;
 
    double *d_a;
    double *d_b;
    double *d_c;

    size_t bytes = n*sizeof(double);
 
    h_a = (double*)malloc(bytes);
    h_b = (double*)malloc(bytes);
    h_c = (double*)malloc(bytes);
 
    cudaMalloc(&d_a, bytes);
    cudaMalloc(&d_b, bytes);
    cudaMalloc(&d_c, bytes);
 
    int i;
    for( i = 0; i < n; i++ ) {
        h_a[i] = i;
        h_b[i] = i;
    }
 
    cudaMemcpy( d_a, h_a, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy( d_b, h_b, bytes, cudaMemcpyHostToDevice);
 
    int blockSize, gridSize;
    blockSize = 1024;
 
    gridSize = (int)ceil((float)n/blockSize);
    vecAdd<<<gridSize, blockSize>>>(d_a, d_b, d_c, n);
     
    cudaMemcpy( h_c, d_c, bytes, cudaMemcpyDeviceToHost );
 
    // Sum up vector c and print result divided by n, this should equal 1 within error
    //double sum = 0;
    for(i=0; i<n; i++)
        printf(" %f + %f =%f\n",h_a[i],h_b[i],h_c[i]);
    //printf("final result: %f\n", sum/(double)n);
 
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    free(h_a);
    free(h_b);
    free(h_c);
 
    return 0;
}

Output: 
 0.000000 + 0.000000 =0.000000
 1.000000 + 1.000000 =2.000000
 2.000000 + 2.000000 =4.000000
.
.
.
.
 96.000000 + 96.000000 =192.000000
 97.000000 + 97.000000 =194.000000
 98.000000 + 98.000000 =196.000000
 99.000000 + 99.000000 =198.000000

