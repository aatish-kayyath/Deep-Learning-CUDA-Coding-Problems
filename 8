    a. Write an OpenMP program to find the largest element in an array using locks.

#include <stdio.h>
#include <omp.h>
#include <stdlib.h>

int main()
{
int *array, i, N, max, c;
omp_lock_t MAXLOCK;

printf("Enter the number of elements\n");
scanf("%d", &N);

if (N <= 0)
{
printf("The array elements cannot be stored\n");
exit(1);
}

array = (int *) malloc(sizeof(int) * N);
for (i = 0; i < N; i++)
array[i] = rand()%1000;

if (N == 1)
{
printf("The Largest Element In The Array Is %d", array[0]);
exit(1);
}
/* Parallel Calc */
printf("locking ..\n");
omp_set_num_threads(8);
omp_init_lock(&MAXLOCK);
max = 0;
printf("lock initialized\n");

#pragma omp parallel for
for (i = 0; i < N; i = i + 1)
{
if (array[i] > max)
{
    omp_set_lock(&MAXLOCK);
    if (array[i] > max)
   	 max = array[i];
    omp_unset_lock(&MAXLOCK);
}
}
omp_destroy_lock(&MAXLOCK);

/* Serial Calculation */
c = array[0];
for (i = 1; i < N; i++)
if (array[i] > c)
c = array[i];

printf("The Array Elements Are \n");
for (i = 0; i < N; i++)
printf("%d\t", array[i]);
printf("\n");

/* Compare */
if (c == max)
printf("\nThe Max Value Is Same For Serial And Using Parallel OpenMP Directive\n");
else
{
printf("\nThe Max Value Is NOT Same In Serial And Using Parallel OpenMP Directive\n");
exit(1);
}

free(array);
printf("\nThe Largest Number Of The Array Is %d\n", max);
}

Output: 
Enter the number of elements
10
locking ..
lock initialized
The Array Elements Are
383    886    777    915    793    335    386    492    649    421    
The Max Value Is Same For Serial And Using Parallel OpenMP Directive
The Largest Number Of The Array Is 915

    b.  Write a CUDA program for adding two vectors.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
 


__global__ void vecAdd(double *a, double *b, double *c, int n)
{
     int id = blockIdx.x*blockDim.x+threadIdx.x;
 
    if (id < n)
        c[id] = a[id] + b[id];
}
 
int main( int argc, char* argv[] )
{
        int n = 100;
 
    double *h_a;
    double *h_b;
    double *h_c;
 
    double *d_a;
    double *d_b;
    double *d_c;

    size_t bytes = n*sizeof(double);
 
    h_a = (double*)malloc(bytes);
    h_b = (double*)malloc(bytes);
    h_c = (double*)malloc(bytes);
 
    cudaMalloc(&d_a, bytes);
    cudaMalloc(&d_b, bytes);
    cudaMalloc(&d_c, bytes);
 
    int i;
    for( i = 0; i < n; i++ ) {
        h_a[i] = i;
        h_b[i] = i;
    }
 
    cudaMemcpy( d_a, h_a, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy( d_b, h_b, bytes, cudaMemcpyHostToDevice);
 
    int blockSize, gridSize;
    blockSize = 1024;
 
    gridSize = (int)ceil((float)n/blockSize);
    vecAdd<<<gridSize, blockSize>>>(d_a, d_b, d_c, n);
     
    cudaMemcpy( h_c, d_c, bytes, cudaMemcpyDeviceToHost );
 
    // Sum up vector c and print result divided by n, this should equal 1 within error
    //double sum = 0;
    for(i=0; i<n; i++)
        printf(" %f + %f =%f\n",h_a[i],h_b[i],h_c[i]);
    //printf("final result: %f\n", sum/(double)n);
 
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    free(h_a);
    free(h_b);
    free(h_c);
 
    return 0;
}


Output: 
 0.000000 + 0.000000 =0.000000
 1.000000 + 1.000000 =2.000000
 2.000000 + 2.000000 =4.000000
.
.
.
.
 96.000000 + 96.000000 =192.000000
 97.000000 + 97.000000 =194.000000
 98.000000 + 98.000000 =196.000000
 99.000000 + 99.000000 =198.000000
