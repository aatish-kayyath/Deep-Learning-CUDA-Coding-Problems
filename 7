    a. Write an OpenMP program to find the largest element in an array using critical section

#include <stdio.h>
#include <omp.h>
#include<stdlib.h>

int main()
{
int *array, i, N, max, c;
printf("Enter the number of elements\n");
scanf("%d", &N);

if (N <= 0)
{
printf("The array elements cannot be stored\n");
exit(1);
}

array = (int *) malloc(sizeof(int) * N);

for (i = 0; i < N; i++)
array[i] = rand()%1000;

if (N== 1)
{
printf("The Largest Number In The Array is %d", array[0]);
exit(1);
}

max = 0;
omp_set_num_threads(8);
#pragma omp parallel for
for (i = 0; i < N; i = i + 1)
{
if (array[i] > max)
#pragma omp critical
if (array[i] > max)
max = array[i];
}

/* Serial Calculation */
c = array[0];
for (i = 1; i < N ; i++)
if (array[i] > c )
c  = array[i];

printf("The Input Array Elements Are \n");
for (i = 0; i < N ; i++)
printf("\t%d", array[i]);
printf("\n");

/* Checking For Output Validity */
if (c  == max)
printf("The Max Value Is Same From Serial And Parallel OpenMP Directive");
else
{
printf("The Max Value Is Not Same In Serial And Parallel OpenMP Directive");
exit(1);
}
printf("\n");
free(array);
printf("The Largest Number In The Given Array Is %d\n", max);
}

Output:
Enter the number of elements
20
The Input Array Elements Are
    383    886    777    915    793    335    386    492    649    421    362    27    690    59    763    926    540    426    172    736
The Max Value Is Same From Serial And Parallel OpenMP Directive
The Largest Number In The Given Array Is 926

    b. Write a MPI program where each processor sends an integer number and its rank to the master processor, where the master gathers all the information and prints the data accordingly

#include <stdio.h>
#include <mpi.h>
 
void main(int argc, char *argv[])
{

int sc,rc,rank,size, m, param[10],i;
MPI_Init(&argc,&argv);
MPI_Comm_rank(MPI_COMM_WORLD,&rank);
MPI_Comm_size(MPI_COMM_WORLD,&size);
sc = rc =1;
m=10 + rank;

MPI_Gather(&m,sc,MPI_INT,param,rc,MPI_INT,0,MPI_COMM_WORLD);

if(rank==0)
{
for(i=1;i<size;++i)
printf("Rank %d received param[%d] = %d \n",rank,i,param[i]);
}

MPI_Finalize();
}

Output:
Rank 0 received param[1] = 11
Rank 0 received param[2] = 12
Rank 0 received param[3] = 13
Rank 0 received param[4] = 14
Rank 0 received param[5] = 15
Rank 0 received param[6] = 16
Rank 0 received param[7] = 17
