    a. Write an OpenMP program to show how firstprivate clause works.(Factorial program)

#include<stdio.h>
#include<stdlib.h>
#include <omp.h>

int fac(int n)
{
int out =1 ;
for(int i =1     ; i< n+1 ; i++) out *= i;
return out;
}

int main(int argc,char *argv[])
{
omp_set_dynamic(0);
omp_set_num_threads(4);
int *x;
int n = 12;
int i;
x = (int *) malloc(sizeof(int) * n);

for(int i = 0 ; i <n ; i++)
x[i] = fac(i);

int j =0;
#pragma omp parallel for firstprivate(j,x)
 for (int i =1; i<n ; i++)
{
j =j +i;
x[i] = j * x[i-1];
}

for (i=0; i<n; i++)
printf("factorial(%d)=%lld * [%d]=%lld\n",i,fac(i),i,x[i]);
return 0;
}




OUTPUT:
./f2 4
4 threads
factorial( 0) =          	1 x[ 0]=         	1
factorial( 1) =          	1 x[ 1]=         	1
factorial( 2) =          	2 x[ 2]=         	3
factorial( 3) =          	6 x[ 3]=        	18
factorial( 4) =         	24 x[ 4]=        	24
factorial( 5) =        	120 x[ 5]=       	216
factorial( 6) =        	720 x[ 6]=      	3240
factorial( 7) =       	5040 x[ 7]=      	5040
factorial( 8) =      	40320 x[ 8]=     	75600
factorial( 9) =     	362880 x[ 9]=   	1814400
factorial(10) =    	3628800 x[10]=  	18144000
factorial(11) =   	39916800 x[11]= 	381024000


    b. Write an MPI program where the master processor broadcasts a message “HELLO MSRIT” to the remaining processors using broadcast system call.
#include <stdio.h>
#include <string.h>
#include <mpi.h>

int main (int argc, char *argv[])
{
int rank;
char msg[20];

MPI_Init (&argc, &argv);
MPI_Comm_rank (MPI_COMM_WORLD, &rank);

   if (rank == 0) strcpy(msg,"HELLO MSRIT");
   
MPI_Bcast (msg, 20, MPI_CHAR, 0, MPI_COMM_WORLD);
printf ("[%d] msg = %s\n", rank, msg);
 
 // Wait for every process to reach this code
   MPI_Barrier (MPI_COMM_WORLD);
   MPI_Finalize();
   return 0;
}

Output:
[0] msg = HELLO MSRIT
[2] msg = HELLO MSRIT
[1] msg = HELLO MSRIT
[3] msg = HELLO MSRIT

